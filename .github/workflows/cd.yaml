name: CD

on:
    release:
        types: [published]
    push:
        branches: [main]

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    build:
        name: Build prod images
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: 'Login to GitHub Container Registry'
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{github.actor}}
                  password: ${{secrets.GITHUB_TOKEN}}
            - name: Build Lateset Docker images
              uses: docker/bake-action@v6
              if: github.ref == 'refs/heads/main'
              env:
                  EXTERNAL_USER_ID: 1001
              with:
                  pull: true
                  load: true
                  push: true
                  files: compose.yaml
                  set: |
                      *.cache-from=type=gha,scope=${{github.ref}}
                      *.cache-from=type=gha,scope=refs/heads/main
                      *.cache-to=type=gha,scope=${{github.ref}},mode=max
            - name: Build Branch-tagged Docker images
              uses: docker/bake-action@v6
              env:
                  EXTERNAL_USER_ID: 1001
                  IMAGE_TAG: ${{ github.ref_name }}
              with:
                  pull: true
                  load: true
                  push: true
                  files: compose.yaml
                  set: |
                      *.cache-from=type=gha,scope=${{github.ref}}
                      *.cache-from=type=gha,scope=refs/heads/main
                      *.cache-to=type=gha,scope=${{github.ref}},mode=max

    deploy-demo:
        name: Deploy to staging
        runs-on: ubuntu-latest
        needs: [ build ]
        environment: DEMO
        if: github.event_name == 'release'
        env:
            DOCKER_HOST: 'ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}'
            APP_ENV: ${{ secrets.APP_ENV }}
            APP_SECRET: ${{ secrets.APP_SECRET }}
            DATABASE_URL: ${{ secrets.DATABASE_URL }}
            SERVER_NAME: ${{ secrets.SERVER_NAME }}
            MAILER_DSN: ${{ secrets.MAILER_DSN }}
            AUTHORIZED_ADMIN_EMAIL_DOMAINS: ${{ secrets.AUTHORIZED_ADMIN_EMAIL_DOMAINS }}
            EMAIL_FROM_ADDRESS: ${{ secrets.EMAIL_FROM_ADDRESS }}
            GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
            REDIS_URL: ${{ secrets.REDIS_URL }}
            IMAGE_TAG: ${{ github.ref_name }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Docker Compose
              uses: docker/setup-compose-action@v1
              with:
                  version: latest
            - name: Set up private key
              run: mkdir -p ~/.ssh && echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
            - name: Trust remote host
              run: ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
            - name: Docker login
              run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
            - name: Deploy to staging
              run: docker compose -f compose.yaml up -d --pull always --wait php --force-recreate --no-build --remove-orphans
            - name: Prune server
              run: docker system prune -f --all --volumes
